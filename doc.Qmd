---
title: "Progetto DA"
format: html
#format: pdf
editor: visual
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
library(knitr)
library(yaml)
library(moments)
library(ggplot2)
library(ggcorrplot)
library(MASS)
knitr::opts_chunk$set(echo = TRUE)
```

## Progetto di Data Analytics

Con la presente analisi si vuole sviluppare un modello predittivo per la variabile mort.

### Descrizione delle variabili presenti

Le variabili all'interno del dataset proposto sono 16

-   PREC ➜ Precipitazioni medie annue in pollici

-   JANT ➜ Temperatura media di gennaio in gradi F

-   JULT ➜ Temperatura media di luglio in gradi F

-   OVR65 ➜ % della popolazione SMSA (standard metropolitan statistical area) del 1960 di età pari o superiore a 65 anni

-   POPN ➜ Dimensione media della famiglia

-   EDUC ➜ Anni scolastici medi completati da coloro che hanno più di 22 anni

-   HOUS ➜ % di unità abitative integre e dotate di tutti i servizi

-   DENS ➜ Popolazione per miglio quadrato nelle aree urbanizzate, 1960

-   NONW ➜ % popolazione non bianca nelle aree urbanizzate, 1960

-   WWDRK ➜ % occupati nelle professioni dei colletti bianchi

-   POOR ➜ % di famiglie con reddito \< \$ 3000

-   HC ➜ Potenziale di inquinamento relativo da idrocarburi

-   NOX ➜ Potenziale di inquinamento relativo agli ossidi di azoto

-   SO2 ➜ Potenziale di inquinamento relativo all'anidride solforosa

-   UMIDO ➜ Umidità relativa media annua % alle ore 13:00

-   MORT ➜ Tasso di mortalità totale corretto per età per 100.000 (abitanti)

## Importazione dei dati

```{r}
Pollution = read.csv("Pollution/pollution.csv")
```

## ANALISI DEL DATASET "Pollution"

```{r}
PollutionUnivConf <- read_yaml("pollution-univ.config.yaml")
```

```{r, results='asis'}
univarAnalysis <- function(conf, df) {
  cat("\n\n\\clearpage\n\\newpage")
  cat("\n\n##", conf$colname, "\n")
  if ("uselog" %in% conf$run) {
    df[, conf$colname] <- log(df[, conf$colname])
  }
  cat("\n\n Numero di NA: ", sum(is.na(df[, conf$colname]), na.rm = T), "\n\n")
  if ("filterzeros" %in% conf$run) {
    cat("\n\n Numero di zeri rimossi: ", sum(df[, conf$colname] == 0, na.rm = T), "\n\n")
    df <- df[df[, conf$colname] != 0,]
  }
  if (sum(
      as.logical("dobarplot" %in% conf$run), 
      as.logical("doboxplot" %in% conf$run),
      as.logical("dohist" %in% conf$run),
      as.logical("dodensity" %in% conf$run),
      as.logical("doqqplot" %in% conf$run)
    ) > 2) {
    par(mfrow = c(2, 2))
  } else {
    par(mfrow = c(1, 1))
  }
  if ("dotable" %in% conf$run) {
    print(kable(t(rbind(
      idx = levels(factor(df[, conf$colname])),
      abs = table(df[, conf$colname]),
      rel = prop.table(table(df[, conf$colname]))
    )), col.names = c("Level", "Abs. Freq", "Rel. Freq"), row.names = FALSE))
  } else {
    temp <- as.array(summary(df[, conf$colname]))
    temp["Skewness"] <- skewness(df[, conf$colname])
    if ("kurtosis" %in% conf$run) {
      temp["Kurtosis"] <- kurtosis(df[, conf$colname])
    }
    print(kable(as.array(temp), col.names = c("Stat", "Value")))
  }
  if ("dobarplot" %in% conf$run) {  
    barplot(table(df[, conf$colname]), main=NULL)
  }
  if ("doboxplot" %in% conf$run) {
    boxplot(df[, conf$colname], main=NULL)
  }
  if ("dohist" %in% conf$run) {
    hist(df[, conf$colname], freq = F, main=NULL, xlab = NULL)
  }
  if ("dodensity" %in% conf$run) {
    plot(density(df[, conf$colname], na.rm = T), main="")
  }
  if ("doqqplot" %in% conf$run) {
    qqnorm(df[, conf$colname])
    qqline(df[, conf$colname])
  }
  if (!is.na(conf$desc)) {
    cat("\n\n", conf$desc, "\n")
  }
}

out <- sapply(PollutionUnivConf$variables, univarAnalysis, df = Pollution)
```

## ANALISI BIVARIATA DEL DATASET "House prices"

```{r}
PollutionBivConf <- read_yaml("pollution-biv.config.yaml")
```

```{r, results='asis'}
bivarAnalysis <- function(conf, df) {
  cat("\\newpage")
  cat("\n\n##", conf$colname, "\n")
  if ("uselog" %in% conf$run) {
    df[, conf$colname] <- log(df[, conf$colname])
  }
  cat("\n\n Numero di NA: ", sum(is.na(df[, conf$colname]), na.rm = T), "\n\n")
  if ("filterzeros" %in% conf$run) {
    cat("\n\n Numero di zeri rimossi: ", sum(df[, conf$colname] == 0, na.rm = T), "\n\n")
    df <- df[df[, conf$colname] != 0,]
  }
  if ("docmpboxplot" %in% conf$run) {
    boxplot(df[, conf$tgcol]~df[, conf$colname], 
            xlab = conf$colname, ylab = conf$tgcol)
  }
  if ("doanova" %in% conf$run) {
    anova_obj <- aov(df[, conf$tgcol]~df[, conf$colname])
    print(kable(summary(anova_obj)[1][[1]], row.names = FALSE))
    if ("doetasq" %in% conf$run) {
      etasq_obj <- summary(anova_obj)[1][[1]][[2]][1]/(summary(anova_obj)[1][[1]][[2]][2]+
                                                         summary(anova_obj)[1][[1]][[2]][1])
      cat("\n\n Eta squared: ", etasq_obj, "\n\n")
    }
  }
  if ("doscatterplot" %in% conf$run) {
    plot(df[, conf$colname], df[, conf$tgcol], xlab = conf$colname, 
         ylab = conf$tgcol)
    lm_obj <- lm(df[, conf$tgcol]~df[, conf$colname])
    abline(a= lm_obj$coefficients[1], b = lm_obj$coefficients[2], col=2)
  }

  if ("doscatterplot" %in% conf$run) {
    plot(df[, conf$colname], df[, conf$tgcol], xlab = conf$colname, 
         ylab = conf$tgcol)
    lm_obj <- lm(df[, conf$tgcol]~df[, conf$colname])
    abline(a= lm_obj$coefficients[1], b = lm_obj$coefficients[2], col=2)
    print(kable(summary(lm_obj)$coefficients, row.names = FALSE))
    if ("dorsq" %in% conf$run) {
      print(kable(cbind(
        cov = cov(df[, conf$colname], df[, conf$tgcol], use = "complete.obs"),
        cor = cor(df[, conf$colname], df[, conf$tgcol], use = "complete.obs"),
        rsq = summary(lm_obj)$r.squared
      )))
    }
  }
  if (!is.na(conf$desc)) {
    cat("\n\n", conf$desc, "\n")
  }
}

out <- sapply(PollutionBivConf$variables, bivarAnalysis, df = Pollution)
```

# ANALISI MULTIVARIATA: stima del modello

Valutiamo la correlazione tra le varie variabili per vedere se ce ne sono alcune di linearmente dipendenti

```{r}
ggcorrplot(cor(Pollution), hc.order = TRUE,  type = "lower", lab = F)
```

Notiamo che non ci sono variabili linearmente dipendenti tra loro visibili tramite alta correlazione a parte *hc* e *nox.* Scegliamo dunque di mantenere la variabile *nox*.

```{r}
lreg <- lm(mort ~ ., data = Pollution)
a <- stepAIC(lreg, direction = "both")
```

```{r}
summary(a)
```

L'AIC risultante dal modello sviluppato dalla funzione stepAIC è 429.63 con variabili considerate finali $$\text{mort} \sim \text{prec} + \text{jant} + \text{jult} + \text{ovr65} + \text{popn} + \text{educ} + \text{nonw} + \text{hc} + \text{nox}$$

```{r}
reg1 <- lm(mort ~ poor + prec + popn + popn*poor + educ + nonw + so2, data = Pollution)
summary(reg1)

reg2 <- lm(mort ~ nonw + prec + educ + so2  + nonw*poor + educ*prec*nonw, data = Pollution)
summary(reg2)

reg3 <- lm(mort ~ nonw + prec + educ + so2  + nonw*poor + educ*nonw + educ*hous*prec*poor, data = Pollution)
summary(reg3)


AIC(reg3)
```

Il modello da noi formulato è invece il seguente

```{r}
emmaeli <- lm(mort ~ educ + nonw + poor + prec, data = Pollution)
summary(emmaeli)

AIC(emmaeli)
```

!!!!!!!!!!!!!!!!!!! RAGAZZI VALUTATE QUESTA::::

```{r}
emmaeli2 <- lm(mort ~ educ + nonw + poor + prec*log(nox) + educ*poor*nonw + hous*educ  , data = Pollution)
summary(emmaeli2)

AIC(emmaeli2)
```
